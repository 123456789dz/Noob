#include <stdlib.h>
#include <stdio.h>
#include "cv.h"
#include "cxcore.h"
#include "highgui.h"
#include <vector>
using namespace std;
 
IplImage* GetPyrDownImage(const IplImage* pSource, int nTime)
{
	// 判断输入参数
	if (pSource == NULL)
	{
		printf("GetPyrDownImage Source Image is NULL:\n");
		return NULL;
	}
	if (nTime < 1)
	{
		printf("func GetPyrDownImage err!\n");
		return NULL;
	}
	CvSize iSourceSize = cvGetSize(pSource);
	CvSize iPyrDownSize = cvSize(iSourceSize.width / 2, iSourceSize.height / 2);
 
	//中间变量
	IplImage* pPyrDownedImage = cvCreateImage(iPyrDownSize, pSource->depth
		                                                 ,pSource->nChannels);
	cvPyrDown(pSource, pPyrDownedImage, CV_GAUSSIAN_5x5);
	// 结果
	IplImage* pResult;
 
	if (nTime == 1)
	{
		pResult =  cvCloneImage(pPyrDownedImage);
	}
	else
	{
		pResult = GetPyrDownImage(pPyrDownedImage, --nTime);
	}
	cvReleaseImage(&pPyrDownedImage);
	return pResult;
}
 
 
int main()
{
	IplImage *img=cvLoadImage("C:\\Users\\Liu\\Desktop\\bridge.bmp",1);
	IplImage *timg;
	vector<IplImage *> Vimg;
	for (int i=1; i<4; i++)
	{
		timg=GetPyrDownImage(img,i);
		Vimg.push_back(timg);
	}
	 cvNamedWindow("pyramid1", CV_WINDOW_AUTOSIZE );
	 cvNamedWindow("pyramid2", CV_WINDOW_AUTOSIZE );
	 cvNamedWindow("pyramid3", CV_WINDOW_AUTOSIZE );
	for (int j=0; j<3; j++)
	{
		cvShowImage("pyramid1",Vimg[0]);
		cvShowImage("pyramid2",Vimg[1]);
		cvShowImage("pyramid3",Vimg[2]);
	}
	cvWaitKey(0);
	for (int k=0; k<3; k++)
	{
		cvReleaseImage(&Vimg[k]);
	}
	cvReleaseImage(&img);
	cvDestroyWindow("pyramid1");
	cvDestroyWindow("pyramid2");
	cvDestroyWindow("pyramid3");
